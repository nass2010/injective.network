import{Y as r,_ as n,x as k,aw as c}from"./entry.d056f6df.js";import{s as i}from"./StreamProvider.04db0d1c.js";import{f3 as h}from"./injective.5ec62b21.js";const a=new h(r.indexer),B=({callback:t})=>{const e=a.streamBlocks.bind(a),s={callback:t};i.subscribe({fn:e,args:s,key:n.Blocks})},m=()=>({blockHeight:0,streamedBlockHeight:0,latestBlocks:[],latestTransactions:[],latestOneHundredBlocks:[],latestOneHundredBlocksWithoutPoll:[]}),o=k("network",{state:()=>m(),actions:{async fetchLatestBlockHeight(){const t=o(),{blocks:e}=await c.fetchBlocks({limit:1}),[s]=e;t.$patch({blockHeight:s.height})},async fetchLatestBlocks(){const t=o(),{blocks:e}=await c.fetchBlocks({limit:10});t.$patch({latestBlocks:e})},async fetchLatestOneHundredBlocks(){const t=o(),{blocks:e}=await c.fetchBlocks({limit:100});t.$patch({latestOneHundredBlocks:e})},async fetchLatestOneHundredBlocksWithoutPoll(){const t=o(),{blocks:e}=await c.fetchBlocks({limit:100});t.$patch({latestOneHundredBlocksWithoutPoll:e})},streamBlocks(){const t=o();B({callback:({block:e})=>{const[s]=t.latestBlocks,l=s&&s.blockHash!==e.blockHash;t.$patch({latestBlocks:l?[e,...t.latestBlocks]:t.latestBlocks,streamedBlockHeight:e.height})}})},reset(){o().$reset()}}});export{o as u};
